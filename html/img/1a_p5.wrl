#VRML V2.0 utf8

Viewpoint	{
  position 0 2.7 10
	orientation	1 0 0 -.2
}

DEF	Box Transform	{
	children [
		Shape	{
			geometry DEF box IndexedLineSet	{
				coord	Coordinate {}
				coordIndex [
					0 1 2 3 0 4 5 6 7 4	-1
					3 7 -1
					2 6 -1
					1 5 -1
				]
			}
			appearance Appearance	{
				material Material	{
					emissiveColor	.5 .5 .5
				}
			}
		}
	]
}

DEF	Particles Transform	{}

DEF	Particles1 Transform {}

DEF	Timer TimeSensor {
	cycleInterval	1
	loop TRUE
}

DEF	Builder Script {
	eventIn	SFTime tick
	field	SFNode Timer USE Timer
	field	SFNode box USE box
	field	SFNode Particles USE Particles
	field	SFNode Particles1 USE	Particles1
	url	"javascript:
		var boxSize = new SFVec3f(5, 4, 4);
		var hx = boxSize.x/2;
		var hy = boxSize.y/2;
		var hz = boxSize.z/2;
		var nParticles = 100;
		var nParticles1 = 100;
		var boxVertex = new MFVec3f();
		var boxIndex = new MFInt32();
		var firstTime = true;
		var lastTime = 0;
		var dt = 0.0;
		var v = new MFVec3f();
		var v1 = new MFVec3f();
		var sdf = .2;

		var nSteps = 1e6;
		var step = 0;
		var cf=.2;

		function initialize(){
			boxVertex[0] = new SFVec3f(-hx, -hy,  hz);
			boxVertex[1] = new SFVec3f( hx, -hy,  hz);
			boxVertex[2] = new SFVec3f( hx,  hy,  hz);
			boxVertex[3] = new SFVec3f(-hx,  hy,  hz);
			boxVertex[4] = new SFVec3f(-hx, -hy, -hz);
			boxVertex[5] = new SFVec3f( hx, -hy, -hz);
			boxVertex[6] = new SFVec3f( hx,  hy, -hz);
			boxVertex[7] = new SFVec3f(-hx,  hy, -hz);

			box.coord.point = boxVertex;

			objString = 'Transform{children Shape{geometry Sphere{radius .04}appearance Appearance{material Material{diffuseColor .8 .8 .8}}}}';
			objString1 = 'Transform{children Shape{geometry Sphere{radius .04}appearance Appearance{material Material{diffuseColor 0 0 0}}}}';
	
			for (var i=0; i<nParticles; i++){
    		newNode = Browser.createVrmlFromString(objString);
		  	Particles.children[i] = newNode[0];
				Particles.children[i].translation = new SFVec3f(2*hx*(-.5 + Math.random()), 
															  2*hy*(-.5 + Math.random()), 
															  2*hz*(-.5 + Math.random()));
			  
				v[i] = new SFVec3f(sdf*(-2 + 4*Math.random()),
													 sdf*(-2 + 4*Math.random()),
													 sdf*(-2 + 4*Math.random()));		  
			}

			for (var i=0; i<nParticles1; i++){
    		newNode = Browser.createVrmlFromString(objString1);
		  	Particles1.children[i] = newNode[0];
				Particles1.children[i].translation = new SFVec3f(cf*hx*(-.5 + Math.random()), 
															  cf*hy*(-.5 + Math.random()), 
															  cf*hz*(-.5 + Math.random()));
			  
				v[i] = new SFVec3f(sdf*(-2 + 4*Math.random()),
													 sdf*(-2 + 4*Math.random()),
													 sdf*(-2 + 4*Math.random()));		  
			}
		}

		function tick(time){
			if (firstTime) {
				firstTime = false;
				lastTime = time;
			}

			dt = time - lastTime;
			lastTime = time;

			Browser.setDescription(step);

			if (step >= nSteps) {
			  Timer.stopTime = time;
			}
			else step++;

			for (var i=0; i<nParticles; i++){
				var x = Particles.children[i].translation.x;
				var y = Particles.children[i].translation.y;
				var z = Particles.children[i].translation.z;

				var nx = x + v[i].x * dt;
				if ((nx < -hx) || (nx > hx)) {
					nx = x;
					v[i].x = -v[i].x;
				}

				var ny = y + v[i].y * dt;
				if ((ny < -hy) || (ny > hy)) {
					ny = y;
					v[i].y = -v[i].y;
				}

				var nz = z + v[i].z * dt;
				if ((nz < -hz) || (nz > hz)) {
					nz = z;
					v[i].z = -v[i].z;
				}

				Particles.children[i].translation = new SFVec3f(nx, ny, nz);
			}

			for (var i=0; i<nParticles1; i++){
				var x = Particles1.children[i].translation.x;
				var y = Particles1.children[i].translation.y;
				var z = Particles1.children[i].translation.z;

				var nx = x + v1[i].x * dt;
				if ((nx < -hx) || (nx > hx)) {
					nx = x;
					v1[i].x = -v1[i].x;
				}

				var ny = y + v1[i].y * dt;
				if ((ny < -hy) || (ny > hy)) {
					ny = y;
					v1[i].y = -v1[i].y;
				}

				var nz = z + v1[i].z * dt;
				if ((nz < -hz) || (nz > hz)) {
					nz = z;
					v1[i].z = -v1[i].z;
				}

				Particles1.children[i].translation = new SFVec3f(nx, ny, nz);
			}

//			for (var i=0; i<nParticles1; i++){
//				var x = points1[i].x;
//				var y = points1[i].y;
//				var z = points1[i].z;

//				var nx = x + v1[i].x * dt;
//				if ((nx < -hx) || (nx > hx)) {
//					nx = x;
//					v1[i].x = -v1[i].x;
//				}

//				var ny = y + v1[i].y * dt;
//				if ((ny < -hy) || (ny > hy)) {
//					ny = y;
//					v1[i].y = -v1[i].y;
//				}

//				var nz = z + v1[i].z * dt;
//				if ((nz < -hz) || (nz > hz)) {
//					nz = z;
//					v1[i].z = -v1[i].z;
//				}

//				points1[i] = new SFVec3f(nx, ny, nz);
//			}

//			Particles1.coord.point = points1;

			for (var i=0; i<nParticles; i++){			  
				v[i] = new SFVec3f(sdf*(-2 + 4*Math.random()),
													 sdf*(-2 + 4*Math.random()),
													 sdf*(-2 + 4*Math.random()));		  
			}

			for (var i=0; i<nParticles1; i++){
				v1[i] = new SFVec3f(sdf*(-2 + 4*Math.random()),
													 sdf*(-2 + 4*Math.random()),
													 sdf*(-2 + 4*Math.random()));		  
			}

		}
	"
}

ROUTE	Timer.time TO	Builder.tick